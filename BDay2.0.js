//This was generated by asking ChatGPT to optimize the original code in BDay.js

console.log('Hello');

// Define all our variables
const originalHTML = document.getElementById('bdayCalculation').innerHTML;
let year, month, day, centuryCode, baseYear, xxYear, xxYearRemainder, xxYearSubRemainder;
let xxYearQuotient, xxYearRemDiv4Remainder, xxYearRemDiv4Quotient, monthDoomsday, userDoomsday;
let totalResult, weekDate, x, weekDay, adjustedWeekDate;

document.getElementById('submitButton').onclick = function() {
    // Pull in the user entered data for year, month, and day once the user clicks the 'submit' button
    year = Number(document.getElementById('birthYear').value);
    month = document.getElementById('birthMonth').value;
    day = Number(document.getElementById('birthDay').value);
    console.log(`The compiled date is the ${day} of ${month}, ${year}.`);

    // Using the century the user was born in we determine our first value in our equation: centuryCode.
    calcCenturyCode();
    console.log(`The centuryCode is ${centuryCode} for the ${baseYear}'s`);

    // Determine xxYearQuotient & xxYearRemainder
    xxYear = year % 100;
    xxYearRemainder = xxYear % 12;
    xxYearQuotient = Math.floor(xxYear / 12);
    console.log(`Last 2 digits of ${year} are ${xxYear}`);
    console.log(`After dividing the last two digits of year[${xxYear}] by 12, the quotient is ${xxYearQuotient} and the remainder is ${xxYearRemainder}`);

    // Calculate xxYearRemDiv4Quotient
    xxYearRemDiv4Remainder = xxYearRemainder % 4;
    xxYearRemDiv4Quotient = Math.floor(xxYearRemainder / 4);
    console.log(`After dividing the xxYearRemainder by 4, the quotient is ${xxYearRemDiv4Quotient} and the remainder is ${xxYearRemDiv4Remainder}`);

    // Calculate userDoomsday
    doomsdayByMonth();
    userDoomsday = day - monthDoomsday;
    console.log(`The userDoomsday value is ${userDoomsday} (date entered by user[${day}] - ${month}'s Doomsday[${monthDoomsday}])`);

    // Summate the 5 values to get our totalResult
    totalResult = centuryCode + xxYearQuotient + xxYearRemainder + xxYearRemDiv4Quotient + userDoomsday;
    console.log(`totalResult[${totalResult}] = centuryCode[${centuryCode}] + xxYearQuotient[${xxYearQuotient}] + xxYearRemainder[${xxYearRemainder}] + xxYearRemDiv4Quotient[${xxYearRemDiv4Quotient}] + userDoomsday[${userDoomsday}]`);

    // Calculate the remainder when dividing the totalResult by 7
    weekDate = totalResult % 7;
    adjustedWeekDate = weekDate < 0 ? weekDate + 7 : weekDate;
    calcWeekday();
    console.log(`After dividing the totalResult[${totalResult}] by 7 the remainder is ${adjustedWeekDate}. This means that the day of the week for the ${day} of ${month}, ${year} was ${weekDay}`);

    // Output various error messages to the user based on their inputs and update the HTML on the website
    executeAndUpdateWebsite();
};

function calcCenturyCode() {
    const centuries = [
        { range: [1, 99], code: 2, base: 0 },
        { range: [100, 199], code: 0, base: 100 },
        { range: [200, 299], code: 5, base: 200 },
        { range: [300, 399], code: 3, base: 300 },
        { range: [400, 499], code: 2, base: 400 },
        { range: [500, 599], code: 0, base: 500 },
        { range: [600, 699], code: 5, base: 600 },
        { range: [700, 799], code: 3, base: 700 },
        { range: [800, 899], code: 2, base: 800 },
        { range: [900, 999], code: 0, base: 900 },
        { range: [1000, 1099], code: 5, base: 1000 },
        { range: [1100, 1199], code: 3, base: 1100 },
        { range: [1200, 1299], code: 2, base: 1200 },
        { range: [1300, 1399], code: 0, base: 1300 },
        { range: [1400, 1499], code: 5, base: 1400 },
        { range: [1500, 1599], code: 3, base: 1500 },
        { range: [1600, 1699], code: 2, base: 1600 },
        { range: [1700, 1799], code: 0, base: 1700 },
        { range: [1800, 1899], code: 5, base: 1800 },
        { range: [1900, 1999], code: 3, base: 1900 },
        { range: [2000, 2099], code: 2, base: 2000 },
        { range: [2100, 2199], code: 0, base: 2100 },
        { range: [2200, 2299], code: 5, base: 2200 },
        { range: [2300, 2399], code: 3, base: 2300 },
        { range: [2400, 2499], code: 2, base: 2400 },
        { range: [2500, 2599], code: 0, base: 2500 },
        { range: [2600, 2699], code: 5, base: 2600 },
        { range: [2700, 2799], code: 3, base: 2700 },
        { range: [2800, 2899], code: 2, base: 2800 },
        { range: [2900, 2999], code: 0, base: 2900 },
        { range: [3000, 3099], code: 5, base: 3000 },
        { range: [3100, 3199], code: 3, base: 3100 },
        { range: [3200, 3299], code: 2, base: 3200 },
        { range: [3300, 3399], code: 0, base: 3300 },
        { range: [3400, 3499], code: 5, base: 3400 },
        { range: [3500, 3599], code: 3, base: 3500 },
        { range: [3600, 3699], code: 2, base: 3600 },
        { range: [3700, 3799], code: 0, base: 3700 },
        { range: [3800, 3899], code: 5, base: 3800 },
        { range: [3900, 3999], code: 3, base: 3900 },
        { range: [4000, 4099], code: 2, base: 4000 },
        { range: [4100, 4199], code: 0, base: 4100 }
    ];

    const century = centuries.find(c => year >= c.range[0] && year <= c.range[1]);
    if (century) {
        centuryCode = century.code;
        baseYear = century.base;
    } else {
        console.log('birthYear is not in year range configured in centuryCode Function');
    }
}

function doomsdayByMonth() {
    const doomsdays = {
        January: xxYear % 4 === 0 ? 4 : 3,
        February: xxYear % 4 === 0 ? 29 : 28,
        March: 14,
        April: 4,
        May: 9,
        June: 6,
        July: 11,
        August: 8,
        September: 5,
        October: 10,
        November: 7,
        December: 12
    };

    monthDoomsday = doomsdays[month] ?? 'Error';
    if (monthDoomsday === 'Error') {
        console.log(`monthDoomsday value based on month could not be determined`);
    }
}

function calcWeekday() {
    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    weekDay = weekdays[adjustedWeekDate] ?? 'Error';
    if (weekDay === 'Error') {
        console.log(`Error in weekDay Calculation`);
    }
}

function refreshMyHTML() {
    document.getElementById('bdayH2').innerHTML = 'You were born on a: ' + weekDay;
    document.getElementById('bdayCalculation').innerHTML = originalHTML;
}

function executeAndUpdateWebsite() {
    if (day <= 0) {
        document.getElementById('bdayH2').textContent = 'Date must be a positive integer. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (day > 31) {
        document.getElementById('bdayH2').textContent = 'Date cannot be greater than 31. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (day > 30 && ['April', 'June', 'September', 'November'].includes(month)) {
        document.getElementById('bdayH2').textContent = 'For this month the date cannot be greater than 30. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (day > 29 && month === 'February') {
        document.getElementById('bdayH2').textContent = 'February only has 29 days on a leap year. Please try using a date between 1-29.';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (day > 28 && month === 'February' && year % 4 !== 0) {
        document.getElementById('bdayH2').textContent = 'February only has 28 days on a non-leap year. Please try using a date between 1-28.';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (year < 1) {
        document.getElementById('bdayH2').textContent = 'Calculator is not configured to go that far back in the past. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (year > 4199) {
        document.getElementById('bdayH2').textContent = 'Calculator is not configured to go that far forward into the future. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else if (weekDay === 'Error' || monthDoomsday === 'Error') {
        document.getElementById('bdayH2').textContent = 'Error in Calculation. Please try again!';
        document.getElementById('bdayCalculation').innerText = null;
    } else {
        refreshMyHTML();
        updateOutputFields();
    }
}

function updateOutputFields() {
    const fields = {
        centuryCode1: `: [${centuryCode}]`,
        userYear1: year,
        quotient1: `: [${xxYearQuotient}]`,
        remainder1: `: [${xxYearRemainder}]`,
        userYear2: year,
        xxYear1: xxYear,
        xxYear2: xxYear,
        quotient2: xxYearQuotient,
        remainder2: xxYearRemainder,
        xxYearRemDiv4Quotient1: `: [${xxYearRemDiv4Quotient}]`,
        remainder3: xxYearRemainder,
        xxYearRemDiv4Quotient2: xxYearRemDiv4Quotient,
        xxYearRemDiv4Remainder: xxYearRemDiv4Remainder,
        userDoomsday1: `: [${userDoomsday}]`,
        userMonth1: `(${month})`,
        userDate1: `[${day}]`,
        userMonth2: `${month}'s`,
        monthDoomsday: `[${monthDoomsday}]`,
        userDoomsday2: `<ins>${userDoomsday}</ins>.`,
        totalResult1: `: [${totalResult}]`,
        totalResult2: `[${totalResult}]`,
        centuryCode2: `[${centuryCode}]`,
        quotient3: `[${xxYearQuotient}]`,
        remainder4: `[${xxYearRemainder}]`,
        xxYearRemDiv4Quotient3: `[${xxYearRemDiv4Quotient}]`,
        userDoomsday3: `[${userDoomsday}]`,
        weekDate1: `: [${weekDate}]`,
        totalResult3: `[${totalResult}]`,
        x: x,
        weekDate2: weekDate
    };

    Object.keys(fields).forEach(id => {
        document.getElementById(id).textContent = fields[id];
    });

    document.getElementById('negativeNumber').innerHTML = weekDate < 0
        ? `For negative remainders, add 7 before moving onto the next step. <br> e.g., your remainder was ${weekDate} so by adding 7 your new remainder is ${adjustedWeekDate}`
        : '<i><small><span id="negativeNumber"></span></small></i>';

    document.getElementById('weekDay').textContent = `[${adjustedWeekDate} = ${weekDay}]`;
}
